SZTRINGEK BÁJTSOROZATTÁ ALAKÍTÁSA I.: más kódolási módok
========================================================

Nézzük meg először az ISO-8859-2 kódolást (Kelet-Európai szabványos):

s = 'á'
b = s.encode('ISO-8859-2')
print(b)  # b'\xe1'

s = b.decode('ISO-8859-2')
print(s, type(s), len(s), hex(ord(s))) # á <class 'str'> 1 0xe1

Ebben a kódkészletben hexa E1 az á betű kódja.

===========================================

Ugyanez lesz az eredmény a következő kódolásokkal is:

ISO-8859-1
WINDOWS-1250
WINDOWS-1252

Mindegyikben hexa E1 az á betű kódja.

===========================================

Sajnos nem minden ékezetes karakternél ilyen jó a helyzet. Vegyük pl. az ő betűt.

ISO-8859-2 és WINDOWS-1250 esetében oda-vissza tudjuk kódolni:

s = 'ő'
b = s.encode('ISO-8859-2')
print(b) # b'\xf5'

s = b.decode('ISO-8859-2')
print(s, type(s), len(s), hex(ord(s))) # ő <class 'str'> 1 0x151

Az ISO-8859-1 és a WINDOWS-1252 viszont nem engedi kódolni sem, már az encode metódus
hibát jelez.

===========================================

A helyzet még ennél is bonyolultabb: Vannak programok, amelyek ilyen esetekben
helyettesítéseket végeznek, az ő helyett például kalapos o-t jelenítenek meg.

===========================================

Ez az egész azért fontos, mert vannak programok, amelyek bájtsorozatot szolgáltatnak
(pl. a requests) és ha ezek szöveget tartalmaznak, akkor nem feltétlenül UTF-8-ban
vannak kódolva. Továbbá ez az egész problémakör nyilván nemcsak a Python keretei
között merül fel.

===========================================

